from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup 
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database.requests import get_masters, get_services, get_categories

contact = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True) ]
], resize_keyboard=True, input_field_placeholder='–ù–∞–∂–º–∏—Ç–µ –∫–Ω–∏–ø–∫—É –Ω–∏–∂–µ.')

main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–ú–µ–Ω—é')]
], resize_keyboard=True)

back_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='–ú–µ–Ω—é')]
])

menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã', callback_data='view_prices')],
    [InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É', callback_data='book_service')],
    [InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å / –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='view_or_reschedule')],
    [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã', callback_data='view_works')],
    [InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É', callback_data='ask_bot')],
    [InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º', callback_data='contact_master')]
])

back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
])

category_choice = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üíÖ –ú–∞–Ω–∏–∫—é—Ä', callback_data='category_1')],
    [InlineKeyboardButton(text='üë£ –ü–µ–¥–∏–∫—é—Ä', callback_data='category_2')],
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='–ú–µ–Ω—é')]
])

confirm_booking = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_yes')],
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='confirm_no')]
])

another_service = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ', callback_data='another_service_yes')],
    [InlineKeyboardButton(text='–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='another_service_no')]
])

yes_no_extension = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='extension_yes')],
    [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='extension_no')]
])

yes_no_design = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='design_yes')],
    [InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='design_no')]
])

skip_comment = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_comment')]
])

async def masters():
    all_masters = await get_masters()
    keyboard = InlineKeyboardBuilder()
    for master in all_masters:
        keyboard.add(InlineKeyboardButton(text=master.name, callback_data=f'master_{master.id}'))
    keyboard.add(back_menu.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def categories():
    all_categories = await get_categories()
    keyboard = InlineKeyboardBuilder()
    for category in all_categories:
        keyboard.add(InlineKeyboardButton(text=category.name, callback_data=f'category_{category.id}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def services(category):
    all_services = await get_services(category)
    keyboard = InlineKeyboardBuilder()
    for service in all_services:
        keyboard.add(InlineKeyboardButton(text=service.name, callback_data=f'service_{service.id}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def masters_for_service(masters):
    keyboard = InlineKeyboardBuilder()
    for master in masters:
        keyboard.add(InlineKeyboardButton(text=master.name, callback_data=f'master_{master.id}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def dates(dates_list):
    keyboard = InlineKeyboardBuilder()
    for date in dates_list:
        date_str = date.strftime('%Y-%m-%d')
        date_display = date.strftime('%d.%m.%Y')
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        import datetime
        today = datetime.date.today()
        if date == today:
            date_display = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date_display})"
        elif date == today + datetime.timedelta(days=1):
            date_display = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date_display})"
        else:
            date_display = f"üìÖ {date_display}"
        keyboard.add(InlineKeyboardButton(text=date_display, callback_data=f'date_{date_str}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def hours(hours_list):
    keyboard = InlineKeyboardBuilder()
    for hour in hours_list:
        keyboard.add(InlineKeyboardButton(text=f"{hour:02d}:--", callback_data=f'hour_{hour}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(3).as_markup()

async def minutes(hour, minutes_list):
    keyboard = InlineKeyboardBuilder()
    for minute in minutes_list:
        keyboard.add(InlineKeyboardButton(text=f"{hour:02d}:{minute:02d}", callback_data=f'minute_{minute}'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(3).as_markup()

async def times(times_list):
    keyboard = InlineKeyboardBuilder()
    for time in times_list:
        time_str = f"{time.hour:02d}:{time.minute:02d}"
        callback_data = f"time_{time.hour:02d}-{time.minute:02d}"
        keyboard.add(InlineKeyboardButton(text=time_str, callback_data=callback_data))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(3).as_markup()

async def appointments(appointments_list):
    keyboard = InlineKeyboardBuilder()
    for appointment in appointments_list:
        id, master, service, date, time, is_cancelled = appointment
        if not is_cancelled:
            text = f"üìÖ {date.strftime('%d.%m')} {time.strftime('%H:%M')} - {service}"
            keyboard.add(InlineKeyboardButton(text=text, callback_data=f'appointment_{id}'))
    keyboard.add(back_menu.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

def appointment_actions(appointment_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=f'edit_{appointment_id}')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data=f'cancel_{appointment_id}')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='view_or_reschedule')]
    ])

async def extension_types():
    keyboard = InlineKeyboardBuilder()
    # ID 13-17 - —ç—Ç–æ —É—Å–ª—É–≥–∏ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è
    keyboard.add(InlineKeyboardButton(text='–î–ª–∏–Ω–∞ –º–∏–Ω–∏', callback_data='extension_13'))
    keyboard.add(InlineKeyboardButton(text='–î–ª–∏–Ω–∞ –º–µ–¥–∏—É–º', callback_data='extension_14'))
    keyboard.add(InlineKeyboardButton(text='–î–ª–∏–Ω–∞ –º–∞–∫—Å', callback_data='extension_15'))
    keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è', callback_data='extension_16'))
    keyboard.add(InlineKeyboardButton(text='–°–ª–æ–∂–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è', callback_data='extension_17'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()

async def design_types():
    keyboard = InlineKeyboardBuilder()
    # ID 9-12 - —ç—Ç–æ —É—Å–ª—É–≥–∏ –¥–∏–∑–∞–π–Ω–∞
    keyboard.add(InlineKeyboardButton(text='–õ–µ–≥–∫–∏–π –¥–∏–∑–∞–π–Ω', callback_data='design_9'))
    keyboard.add(InlineKeyboardButton(text='–°–ª–æ–∂–Ω—ã–π –¥–∏–∑–∞–π–Ω', callback_data='design_10'))
    keyboard.add(InlineKeyboardButton(text='–§—Ä—ç–Ω—á', callback_data='design_11'))
    keyboard.add(InlineKeyboardButton(text='–ê—ç—Ä–æ–≥—Ä–∞—Ñ–∏—è', callback_data='design_12'))
    keyboard.add(back.inline_keyboard[0][0])
    return keyboard.adjust(1).as_markup()